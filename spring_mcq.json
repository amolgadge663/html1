[
    {
        "id": "1",
        "question": "What advice is run once joint-point execution is complete?",
        "options": [
            "@AfterFinish",
            "@AfterJoint",
            "@AfterPoint",
            "@After"
        ],
        "answer": "@After"
    },
    {
        "id": "2",
        "question": "What is used to notify the completion of the session processing?",
        "options": [
            "BindingResult",
            "HttpStatus",
            "SessionStatus",
            "Session"
        ],
        "answer": "SessionStatus"
    },
    {
        "id": "3",
        "question": "What annotation is used for finding transaction and failing it by complaining no Hibernate session is bound to thread?",
        "options": [
            "@TransactionFail",
            "@TransactionHandler",
            "@TransactionResolver",
            "@Transactional"
        ],
        "answer": "@Transactional"
    },
    {
        "id": "4",
        "question": "What are the types of autowire in Spring? Choose the correct option.",
        "options": [
            "byName, byType, destructor, and autodetect",
            "byMethod, byName, autocorrect, and autodetect",
            "byName, byType, byValue, and autodetect",
            "byName, byType, constructor, and autodetect"
        ],
        "answer": "byName, byType, constructor, and autodetect"
    },
    {
        "id": "5",
        "question": "Which among the below classes is used for mapping database row to java object in Spring?",
        "options": [
            "RowMapper",
            "ResultSet",
            "RowSetMapper",
            "ResultSetMapper"
        ],
        "answer": "RowMapper"
    },
    {
        "id": "6",
        "question": "Which among the below annotation represents that a field can't be null?",
        "options": [
            "@NotEmpty",
            "@NotNull",
            "@NeverNull",
            "All of the above"
        ],
        "answer": "@NotNull"
    },
    {
        "id": "7",
        "question": "Which among the below options needs to be registered for loading the application’s root context at start time?",
        "options": [
            "ContextLoaderListener",
            "ContextLoaderStarter",
            "RootContextListener",
            "RootContextTrigger"
        ],
        "answer": "ContextLoaderListener"
    },
    {
        "id": "8",
        "question": "Which among the ViewResolvers resolves the view name to the application’s directory?",
        "options": [
            "InternalResolver",
            "InternalViewResolver",
            "InternalRequestResolver",
            "InternalResourceViewResolver"
        ],
        "answer": "InternalResourceViewResolver"
    },
    {
        "id": "9",
        "question": "Which of the below statements are correct about Spring?",
        "options": [
            "Spring allows developers to develop enterprise-level web applications.",
            "Spring allows developers to code in a modular way.",
            "Spring ensures that application testing is made simple.",
            "All of the above"
        ],
        "answer": "All of the above"
    },
    {
        "id": "10",
        "question": "What method arguments are used in handler methods using @RequestMapping?",
        "options": [
            "@Controller",
            "@Bean",
            "@RequestParam",
            "@Service"
        ],
        "answer": "@RequestParam"
    },
    {
        "id": "11",
        "question": "What annotation receives values in the form of regular expression?",
        "options": [
            "@Pattern",
            "@Password",
            "@Email",
            "@Valid"
        ],
        "answer": "@Pattern"
    },
    {
        "id": "12",
        "question": "What does the byName type of autowiring do?",
        "options": [
            "byName mode means there is no autowiring and explicit reference needs to be added.",
            "byName mode ensures that the autowiring is done by means of the property name. Spring matches and wires the properties with beans of the same name defined in the configuration file.",
            "In this mode, Spring first autowires by the constructor and if not found, it tries to autowire by type.",
            "This mode is similar to byType mode but is restricted to non-parameterised constructors."
        ],
        "answer": "byName mode ensures that the autowiring is done by means of the property name. Spring matches and wires the properties with beans of the same name defined in the configuration file."
    },
    {
        "id": "13",
        "question": "Which among the below is the Handler method annotation in Spring?",
        "options": [
            "@RequestMapping",
            "@Controller",
            "@Service",
            "@Resolve"
        ],
        "answer": "@RequestMapping"
    },
    {
        "id": "14",
        "question": "Which method allows to start a new transaction in Spring?",
        "options": [
            "startSession()",
            "getTransaction()",
            "startNewTransaction()",
            "getSession()"
        ],
        "answer": "getTransaction()"
    },
    {
        "id": "15",
        "question": "What is true about <props> collection configuration elements?",
        "options": [
            "This helps in wiring a list of values, allowing duplicates",
            "This helps in wiring a list of values but without any duplicates.",
            "This can be used to inject a collection of name-value pairs where name and value can be of any type.",
            "This can be used to inject a collection of name-value pairs where the name and value are both Strings."
        ],
        "answer": "This can be used to inject a collection of name-value pairs where the name and value are both Strings."
    },
    {
        "id": "16",
        "question": "Which method gives warning from the compiler resulting from List to List unchecked conversion?",
        "options": [
            "createNativeQuery()",
            "findAll()",
            "updateAll()",
            "batchUpsert()"
        ],
        "answer": "findAll()"
    },
    {
        "id": "17",
        "question": "What property is used for loading hibernate configuration files by the factory bean?",
        "options": [
            "configLocation",
            "config",
            "config.xml",
            "hbm-config"
        ],
        "answer": "configLocation"
    },
    {
        "id": "18",
        "question": "Which method is used for shutting down IoC container in Spring?",
        "options": [
            "registerHook(shutdown)",
            "shutdownHook(true)",
            "registerShutdownHook()",
            "shutdownHandlerHook()"
        ],
        "answer": "registerShutdownHook()"
    },
    {
        "id": "19",
        "question": "What attribute is used for handling web request flow?",
        "options": [
            "servlet-mapping",
            "servlet-attr",
            "servlet-flow",
            "servlet-flow-request"
        ],
        "answer": "servlet-mapping"
    },
    {
        "id": "20",
        "question": "What class is used for giving a class behaviour of DispatcherServlet?",
        "options": [
            "Repository",
            "AbstractAction",
            "AbstractController",
            "Controller"
        ],
        "answer": "AbstractController"
    },
    {
        "id": "21",
        "question": "Which are the modules of Data Access/Integration layer?",
        "options": [
            "JDBC, ORM, OXM, JMS, Transactions",
            "JDBC, ORM, OXM, JMS",
            "JDBC, ORM, Web, Beans",
            "JDBC, ORM, OXM, JMS"
        ],
        "answer": "JDBC, ORM, OXM, JMS, Transactions"
    },
    {
        "id": "22",
        "question": "Which of the following stands true for Spring beans?",
        "options": [
            "Spring beans are managed by the Spring IoC container.",
            "Spring beans are instantiated, assembled, and otherwise managed by a Spring IoC container.",
            "Spring beans are simple POJOs.",
            "All of the above."
        ],
        "answer": "All of the above."
    },
    {
        "id": "23",
        "question": "What is true about <set> collection configuration elements?",
        "options": [
            "This helps in wiring a list of values, allowing duplicates.",
            "This helps in wiring a list of values but without any duplicates.",
            "This can be used to inject a collection of name-value pairs where name and value can be of any type.",
            "This can be used to inject a collection of name-value pairs where the name and value are both Strings."
        ],
        "answer": "This helps in wiring a list of values but without any duplicates."
    },
    {
        "id": "24",
        "question": "Can you inject null and empty string values in Spring?",
        "options": [
            "Yes",
            "No",
            "Yes",
            "No"
        ],
        "answer": "Yes"
    },
    {
        "id": "25",
        "question": "What is RequestHandledEvent:event?",
        "options": [
            "This event is published when the Servlet Context is either initialized or refreshed.",
            "This event is published when the HTTP Request is received.",
            "This event is published when the HTTP session is initialized or refreshed.",
            "This event is published when the HTTP Request is serviced."
        ],
        "answer": "This event is published when the HTTP session is initialized or refreshed."
    },
    {
        "id": "26",
        "question": "Which of the following aspect implementations does Spring support?",
        "options": [
            "XML Schema based aspect implementation",
            "@AspectJ based aspect implementation",
            "Both of the above.",
            "None of the above."
        ],
        "answer": "Both of the above."
    },
    {
        "id": "27",
        "question": "What are the types of transaction management Spring supports?",
        "options": [
            "Programmatic transaction management",
            "Declarative transaction management",
            "Both of above.",
            "None of above."
        ],
        "answer": "Both of the above."
    },
    {
        "id": "28",
        "question": "SpEL is part of core container.",
        "options": [
            "True",
            "False",
            "True",
            "False"
        ],
        "answer": "True"
    },
    {
        "id": "29",
        "question": "Which class is used to map a database row to a java object in spring?",
        "options": [
            "ResultSet",
            "RowMapper",
            "RowSetMapper",
            "ResultSetMapper"
        ],
        "answer": "RowMapper"
    },
    {
        "id": "30",
        "question": "Which of the following class can be used to execute Sql queries in spring?",
        "options": [
            "JDBCHelper",
            "JdbcTemplate",
            "DBHelper",
            "DBTemplate"
        ],
        "answer": "JdbcTemplate"
    },
    {
        "id": "31",
        "question": "What is true about BeanPostProcessor?",
        "options": [
            "It is a concrete class.",
            "It is an interface.",
            "It is an abstract class.",
            "None of the above."
        ],
        "answer": "It is an interface."
    },
    {
        "id": "32",
        "question": "By default a bean is eagerly loaded.",
        "options": [
            "False",
            "False",
            "True",
            "True"
        ],
        "answer": "True"
    },
    {
        "id": "33",
        "question": "Which are the modules of Web layer?",
        "options": [
            "WebSocket, Servlet, Web, Portlet",
            "WebSocket, Servlet, Web-MVC, Web",
            "HTML, JSP, WEB, Portlet",
            "HTML, Servlet, WEB, Portlet"
        ],
        "answer": "WebSocket, Servlet, Web, Portlet"
    },
    {
        "id": "34",
        "question": "Which is the way to provide configuration metadata to spring?",
        "options": [
            "XML Based configuration file.",
            "Annotation based configuration.",
            "Java based configuration.",
            "All of the above."
        ],
        "answer": "All of the above."
    },
    {
        "id": "35",
        "question": "What is session scope?",
        "options": [
            "This scopes a bean definition to an HTTP session.",
            "This scopes the bean definition to Spring IoC container.",
            "This scopes the bean definition to HTTP request.",
            "This scopes the bean definition to HTTP Application/ Global session."
        ],
        "answer": "This scopes a bean definition to an HTTP session."
    },
    {
        "id": "36",
        "question": "What is bean autowiring?",
        "options": [
            "Autowiring lets Spring resolve collaborators (other beans) for your bean by inspecting the contents of the BeanFactory without using <constructor-arg> and <property> elements.",
            "Autowiring injects values in spring beans.",
            "Autowiring injects one bean into another.",
            "Autowiring helps in wiring a list of values, allowing duplicates."
        ],
        "answer": "Autowiring lets Spring resolve collaborators (other beans) for your bean by inspecting the contents of the BeanFactory without using <constructor-arg> and <property> elements."
    },
    {
        "id": "37",
        "question": "What is Weaving?",
        "options": [
            "Weaving is the process of injecting values in objects to create an advised object.",
            "Weaving is the process of linking aspects with other application types or objects to create an advised object.",
            "This is used to inject values in objects.",
            "Weaving is used to check object dependencies."
        ],
        "answer": "Weaving is the process of linking aspects with other application types or objects to create an advised object."
    },
    {
        "id": "38",
        "question": "What are the types of the transaction management Spring supports?",
        "options": [
            "Programmatic transaction management",
            "Declarative transaction management",
            "Both of above.",
            "None of above."
        ],
        "answer": "Both of above."
    },
    {
        "id": "39",
        "question": "How to handle shut down of IoC container?",
        "options": [
            "Using shutdownHook()",
            "Using shutdownHandler()",
            "Using registerHook()",
            "Using registerShutdownHook()"
        ],
        "answer": "Using registerShutdownHook()"
    },
    {
        "id": "40",
        "question": "Which annotation is not used to inject dependencies into a Spring bean?",
        "options": [
            "@Inject",
            "@Bean",
            "@Autowired",
            "@Resource"
        ],
        "answer": "@Bean"
    },
    {
        "id": "41",
        "question": "Which of the following annotations is NOT used to specify that a class is a Spring bean?",
        "options": [
            "@Service",
            "@Qualifier",
            "@Component",
            "@Controller"
        ],
        "answer": "@Qualifier"
    },
    {
        "id": "42",
        "question": "Which annotation is used to enable transaction management in Spring?",
        "options": [
            "@Transactional",
            "@EnableTransactionManagement",
            "@ConfigureTransaction",
            "@EnableTransactions"
        ],
        "answer": "@EnableTransactionManagement"
    },
    {
        "id": "43",
        "question": "Which scope in Spring ensures that object exists between every request in an HTTP session?",
        "options": [
            "Singleton",
            "Prototype",
            "Request",
            "Session"
        ],
        "answer": "Session"
    },
    {
        "id": "44",
        "question": "In order to enable the Spring expression language (SpEL) in Spring beans, Which annotation is used?",
        "options": [
            "@ExpressionLanguage",
            "@EnableSpEL",
            "@SpEL",
            "@Value"
        ],
        "answer": "@Value"
    },
    {
        "id": "45",
        "question": "To be eligible for Spring’s event handling mechanism, which interface should a class implement?",
        "options": [
            "EventListener",
            "ApplicationListener",
            "EventHandler",
            "EventSubscriber"
        ],
        "answer": "ApplicationListener"
    },
    {
        "id": "46",
        "question": "Which annotation is used to enable scheduling tasks in Spring?",
        "options": [
            "@Scheduled",
            "@EnableScheduling",
            "@TaskScheduler",
            "@Scheduling"
        ],
        "answer": "@EnableScheduling"
    },
    {
        "id": "47",
        "question": "Which annotation is used to mark a method as an exception handling method in Spring MVC?",
        "options": [
            "@ExceptionHandler",
            "@ExceptionHandling",
            "@HandleException",
            "@ExceptionResolver"
        ],
        "answer": "@ExceptionHandler"
    },
    {
        "id": "48",
        "question": "If you want to write global exception handling code that can be applied to multiple controllers in Spring MVC, which annotation will you use?",
        "options": [
            "@GlobalExceptionHandling",
            "@GlobalExceptionHandler",
            "@ControllerAdvice",
            "@EnableGlobalExceptionHandling"
        ],
        "answer": "@ControllerAdvice"
    },
    {
        "id": "49",
        "question": "In Spring JDBC, which method will you use to execute a SQL query that can map the results to a Java object?",
        "options": [
            "executeQueryForObject()",
            "fetchObject()",
            "executeForObject()",
            "queryForObject()"
        ],
        "answer": "queryForObject()"
    },
    {
        "id": "50",
        "question": "How can you enable cross-origin resource sharing (CORS) in Spring MVC?",
        "options": [
            "Using the @EnableCors annotation",
            "Using the <enable-cors> tag",
            "Using the @CrossOrigin annotation",
            "Using the @EnableCrossOrigin annotation"
        ],
        "answer": "Using the @CrossOrigin annotation"
    },
    {
        "id": "51",
        "question": "What is the main purpose of the Spring Framework?",
        "options": [
            "To provide a comprehensive programming and configuration model for Java-based enterprise applications",
            "To provide a comprehensive programming and configuration model for JavaScript-based web applications",
            "To provide a comprehensive programming and configuration model for PHP-based web applications",
            "To provide a comprehensive programming and configuration model for Python-based web applications"
        ],
        "answer": "To provide a comprehensive programming and configuration model for Java-based enterprise applications"
    },
    {
        "id": "52",
        "question": "The Spring Framework provides a comprehensive programming and configuration model for Java-based enterprise applications.",
        "options": [
            "singleton",
            "prototype",
            "request",
            "session"
        ],
        "answer": "singleton"
    },
    {
        "id": "53",
        "question": "Different ways to configure Spring-based applications?",
        "options": [
            "XML-based configuration",
            "Java-based configuration",
            "Annotation-based configuration",
            "All of the above"
        ],
        "answer": "All of the above"
    },
    {
        "id": "54",
        "question": "What is the purpose of the Spring IoC container?",
        "options": [
            "To manage the lifecycle of beans and their dependencies",
            "To handle the configuration of the application",
            "To provide a caching mechanism for the application",
            "To provide a security mechanism for the application"
        ],
        "answer": "To manage the lifecycle of beans and their dependencies"
    },
    {
        "id": "55",
        "question": "What is the purpose of the Spring MVC module?",
        "options": [
            "To provide a web framework for building web applications",
            "To provide a data access framework for accessing databases",
            "To provide a caching framework for caching data",
            "To provide a security framework for securing web applications"
        ],
        "answer": "To provide a web framework for building web applications"
    },
    {
        "id": "56",
        "question": "What are Spring stereotype annotations?",
        "options": [
            "@Service",
            "@Controller",
            "@Repository",
            "All of the above"
        ],
        "answer": "All of the above"
    },
    {
        "id": "57",
        "question": "What are two ways to achieve dependency Injection in Spring?",
        "options": [
            "Using Getter and Setter methods",
            "Using Setter and Constructor",
            "Using Getter and Constructor",
            "Using Setter and Factory methods"
        ],
        "answer": "Using Setter and Constructor"
    },
    {
        "id": "58",
        "question": "What is the scope of creating a new instance every time the bean is requested from the spring container?",
        "options": [
            "singleton",
            "prototype",
            "request",
            "session"
        ],
        "answer": "prototype"
    },
    {
        "id": "59",
        "question": "Which is the front controller in Spring MVC?",
        "options": [
            "DispatcherServlet",
            "FrontDispatcherServlet",
            "FrontControllerService",
            "None of the above"
        ],
        "answer": "DispatcherServlet"
    },
    {
        "id": "60",
        "question": "Spring MVC Framework is designed based on which Design Pattern?",
        "options": [
            "Model-View-Controller (MVC)",
            "Layered pattern",
            "Client-server pattern",
            "None of the above"
        ],
        "answer": "Model-View-Controller (MVC)"
    },
    {
        "id": "61",
        "question": "In Spring MVC, DispatcherServlet consults ____________ to map the logical view name with the actual view implementation",
        "options": [
            "ViewResolver",
            "Handler Mapper",
            "Controller",
            "Model"
        ],
        "answer": "ViewResolver"
    },
    {
        "id": "62",
        "question": "In Spring MVC web applications, all the HTTP requests first come to which component?",
        "options": [
            "DispatcherServlet",
            "Controller",
            "HandlerMapper",
            "None of the above"
        ],
        "answer": "DispatcherServlet"
    },
    {
        "id": "63",
        "question": "What is the purpose of the Spring JDBC module?",
        "options": [
            "To provide a data access framework for accessing databases",
            "To provide a web framework for building web applications",
            "To provide aspect-oriented programming functionality",
            "To provide caching functionality"
        ],
        "answer": "To provide a data access framework for accessing databases"
    },
    {
        "id": "64",
        "question": "Which Spring Framework module is used to implement cross-cutting concerns in Spring based-applications?",
        "options": [
            "ORM",
            "AOP",
            "JDBC",
            "TXM"
        ],
        "answer": "AOP"
    },
    {
        "id": "65",
        "question": "JdbcTemplate implements the below design pattern?",
        "options": [
            "Strategy design pattern",
            "Template Design pattern",
            "Singleton design pattern",
            "Decorator design pattern"
        ],
        "answer": "Template Design pattern"
    },
    {
        "id": "66",
        "question": "Different ways to inject Spring beans in Spring-based applications?",
        "options": [
            "Constructor based",
            "Setter based",
            "Field-based",
            "All of the above"
        ],
        "answer": "All of the above"
    },
    {
        "id": "67",
        "question": "Are singleton beans thread-safe?",
        "options": [
            "Yes",
            "No",
            "Yes",
            "No"
        ],
        "answer": "No"
    },
    {
        "id": "68",
        "question": "Which Spring annotation is used to create RESTful web services using Spring MVC?",
        "options": [
            "@RestController",
            "@Controller",
            "@Component",
            "@Rest"
        ],
        "answer": "@RestController"
    },
    {
        "id": "69",
        "question": "@RestController annotation is a combination of the below two annotations",
        "options": [
            "@Component and @ResponseBody annotations",
            "@Controller and @ResponseBody annotations",
            "@Service and @ResponseBody annotations",
            "None of the above"
        ],
        "answer": "@Controller and @ResponseBody annotations"
    },
    {
        "id": "70",
        "question": "Which Spring annotation is used to handle HTTP POST requests?",
        "options": [
            "@GetMapping",
            "@PutMapping",
            "@CreateMapping",
            "@PostMapping"
        ],
        "answer": "@PostMapping"
    },
    {
        "id": "71",
        "question": "Which Spring annotation is used to handle HTTP GET requests?",
        "options": [
            "@GetMapping",
            "@PutMapping",
            "@CreateMapping",
            "@PostMapping"
        ],
        "answer": "@GetMapping"
    },
    {
        "id": "72",
        "question": "Which Spring annotation is used to handle HTTP DELETE requests?",
        "options": [
            "@GetMapping",
            "@PutMapping",
            "@DeleteMapping",
            "@PostMapping"
        ],
        "answer": "@DeleteMapping"
    },
    {
        "id": "73",
        "question": "Which Spring annotation is used to handle HTTP PUT requests?",
        "options": [
            "@GetMapping",
            "@PutMapping",
            "@DeleteMapping",
            "@PostMapping"
        ],
        "answer": "@PutMapping"
    },
    {
        "id": "74",
        "question": "Which annotation do we use to mark the class as a Service class/component?",
        "options": [
            "@Component",
            "@Service",
            "@Controller",
            "@Repository"
        ],
        "answer": "@Service"
    },
    {
        "id": "75",
        "question": "What is the primary use of the Spring Security module?",
        "options": [
            "To provide authentication and authorization for web applications",
            "To provide data access and management",
            "To provide Model-View-Controller architecture",
            "To provide aspect-oriented programming functionality"
        ],
        "answer": "To provide authentication and authorization for web applications"
    },
    {
        "id": "76",
        "question": "Which Spring annotation is used to inject the Spring bean?",
        "options": [
            "@Bean",
            "@Autowired",
            "@Service",
            "@Inject"
        ],
        "answer": "@Autowired"
    },
    {
        "id": "77",
        "question": "Which Spring annotation is used to extract the URI template variable value?",
        "options": [
            "@PathVariable",
            "@ParamRequest",
            "@ModelAttribute",
            "@RequestMapping"
        ],
        "answer": "@PathVariable"
    },
    {
        "id": "78",
        "question": "Which interface represents the Spring IOC container?",
        "options": [
            "ApplicationContent",
            "ApplicationContentFactory",
            "SessionFactory",
            "ApplicationContext"
        ],
        "answer": "ApplicationContext"
    },
    {
        "id": "79",
        "question": "What is the Spring Framework?",
        "options": [
            "A framework for building mobile applications",
            "A library for creating desktop applications",
            "A framework for building Java-based enterprise applications",
            "A tool for writing JavaScript applications"
        ],
        "answer": "A framework for building Java-based enterprise applications"
    },
    {
        "id": "80",
        "question": "How to inject a Spring bean into domain objects?",
        "options": [
            "Java Based",
            "AspectJ",
            "XML",
            "AOP"
        ],
        "answer": "AOP"
    },
    {
        "id": "81",
        "question": "Scripting languages supported by Spring?",
        "options": [
            "All of the mentioned",
            "BeanShell",
            "JRuby",
            "Groovy"
        ],
        "answer": "All of the mentioned"
    },
    {
        "id": "82",
        "question": "Servlet filter registered in web deployment descriptor, which filters request in spring application context.",
        "options": [
            "DelegatingFilterProxy",
            "DelegatingProxy",
            "DelegatingFilter",
            "None of the mentioned"
        ],
        "answer": "DelegatingFilterProxy"
    },
    {
        "id": "83",
        "question": "Which module of the Spring Framework is used for building web applications?",
        "options": [
            "Spring Boot",
            "Spring ORM",
            "Spring AOP",
            "Spring MVC"
        ],
        "answer": "Spring MVC"
    },
    {
        "id": "84",
        "question": "Which of the following property editors are registered by Spring?",
        "options": [
            "CustomNumberEditor",
            "CustomDateEditor",
            "FileEditor",
            "CustomNetEditor"
        ],
        "answer": "FileEditor"
    },
    {
        "id": "85",
        "question": "Which of the following is a Spring project designed to simplify building microservices?",
        "options": [
            "Spring Data",
            "Spring Cloud",
            "Spring MVC",
            "Spring Boot"
        ],
        "answer": "Spring Cloud"
    },
    {
        "id": "86",
        "question": "How does an Introduction advice do this in Spring?",
        "options": [
            "web proxy",
            "dynamic proxy",
            "implements org.springframework.net.bundle interface",
            "none of the mentioned"
        ],
        "answer": "dynamic proxy"
    },
    {
        "id": "87",
        "question": "Which method is used to gracefully shut down all the bean processes after closing the spring container?",
        "options": [
            "destroy method",
            "shutdownHook",
            "none of the mentioned",
            "all of the mentioned"
        ],
        "answer": "shutdownHook"
    },
    {
        "id": "88",
        "question": "Spring Security algorithms to secure passwords.",
        "options": [
            "MD5",
            "SHA",
            "None of the mentioned",
            "All of the mentioned"
        ],
        "answer": "All of the mentioned"
    },
    {
        "id": "89",
        "question": "Session scope attribute to display error message.",
        "options": [
            "SPRING_SECURITY_LAST_ERROR",
            "SPRING_SECURITY_FIRST_EXCEPTION",
            "SPRING_SECURITY_LAST_EXCEPTION",
            "SPRING_SECURITY_EXCEPTION"
        ],
        "answer": "SPRING_SECURITY_LAST_EXCEPTION"
    },
    {
        "id": "90",
        "question": "What does Spring Boot provide to simplify application development?",
        "options": [
            "A built-in web server",
            "Starter dependencies",
            "Automatic configuration",
            "All of the mentioned"
        ],
        "answer": "All of the mentioned"
    },
    {
        "id": "91",
        "question": "Which of the following annotations is used to indicate a controller in Spring MVC?",
        "options": [
            "@Component",
            "@Controller",
            "@Service",
            "@Repository"
        ],
        "answer": "@Controller"
    },
    {
        "id": "92",
        "question": "Which of the following is a characteristic of Spring’s Bean Lifecycle?",
        "options": [
            "Beans are created at runtime only",
            "All beans are created as singletons",
            "Beans can be configured to execute custom initialization methods",
            "Beans are destroyed when the application shuts down only"
        ],
        "answer": "Beans can be configured to execute custom initialization methods"
    },
    {
        "id": "93",
        "question": "Which Spring annotation is used to mark a class as a repository?",
        "options": [
            "@Service",
            "@Repository",
            "@Component",
            "@Controller"
        ],
        "answer": "@Repository"
    },
    {
        "id": "94",
        "question": "Integration of JSF with Spring Application Context.",
        "options": [
            "SpringBeanFacesELResolver",
            "DelegatingVariableResolver",
            "ContextLoaderListener",
            "All of the mentioned"
        ],
        "answer": "All of the mentioned"
    },
    {
        "id": "95",
        "question": "Class which assists Spring Web flow in handling forms.",
        "options": [
            "FormHandler",
            "Form",
            "Form-Handler",
            "FormAction"
        ],
        "answer": "FormAction"
    },
    {
        "id": "96",
        "question": "To use JSF Validation components provided by Spring Faces.",
        "options": [
            "Facelets",
            "Spring Javascript",
            "Faces",
            "None of the mentioned"
        ],
        "answer": "Facelets"
    },
    {
        "id": "97",
        "question": "To publish a REST service with Spring.",
        "options": [
            "accessing data from third-party REST services",
            "publishing an application’s data as a REST service",
            "none of the mentioned",
            "all of the mentioned"
        ],
        "answer": "all of the mentioned"
    },
    {
        "id": "98",
        "question": "The service, which will simply fetch all the items that are for auction and return the description.",
        "options": [
            "EventSpring",
            "SpringBlaze DS",
            "SpringFlex",
            "All of the mentioned"
        ],
        "answer": "SpringBlaze DS"
    },
    {
        "id": "99",
        "question": "How does the Spring JDBC framework know that state 23505 should be mapped to DuplicateKeyException?",
        "options": [
            "error code",
            "SQL state",
            "all of the mentioned",
            "none of the mentioned"
        ],
        "answer": "all of the mentioned"
    },
    {
        "id": "100",
        "question": "Spring EJB Support Classes for Different Types of EJB:",
        "options": [
            "AbstractMessageDrivenBean",
            "AbstractStatelessSessionBean",
            "AbstractStatefulSessionBean",
            "All of the mentioned"
        ],
        "answer": "All of the mentioned"
    },
    {
        "id": "101",
        "question": "Which annotation is used to define a Spring configuration class?",
        "options": [
            "@Service",
            "@Component",
            "@Repository",
            "@Configuration"
        ],
        "answer": "@Configuration"
    },
    {
        "id": "102",
        "question": "What is the purpose of Aspect-Oriented Programming (AOP) in Spring?",
        "options": [
            "To separate cross-cutting concerns from business logic",
            "To handle user input in web applications",
            "To improve performance of the application",
            "To manage database transactions"
        ],
        "answer": "To separate cross-cutting concerns from business logic"
    },
    {
        "id": "103",
        "question": "Which of the following is NOT a feature provided by the Spring Framework?",
        "options": [
            "Aspect-Oriented Programming",
            "Automatic Memory Management",
            "Dependency Injection",
            "Simplified Data Access"
        ],
        "answer": "Automatic Memory Management"
    },
    {
        "id": "104",
        "question": "Proxying Spring services with EJB3s or using Spring to isolate EJBs from acquiring references to distributed resources like REST or RMI.",
        "options": [
            "SpringBeanAutowiring",
            "SpringBeanAutowiringInterceptor",
            "SpringBeanInterceptor",
            "SpringBean"
        ],
        "answer": "SpringBeanAutowiringInterceptor"
    },
    {
        "id": "105",
        "question": "Spring-WS provides various abstract endpoint classes for you to process the request.",
        "options": [
            "org.springframework.*",
            "org.springframework.ws.server.endpoint",
            "org.springframework.ws.server",
            "none of the mentioned"
        ],
        "answer": "org.springframework.ws.server.endpoint"
    },
    {
        "id": "106",
        "question": "Which of the following is a feature of Spring Security?",
        "options": [
            "Authentication",
            "Method security",
            "Authorization",
            "All of the above"
        ],
        "answer": "Authentication"
    },
    {
        "id": "107",
        "question": "Integration of Spring which has each application produce files of shared data for others to consume.",
        "options": [
            "Messaging",
            "File transfer",
            "Shared Database",
            "Remote Procedure Invocation"
        ],
        "answer": "File transfer"
    },
    {
        "id": "108",
        "question": "Which of the following is used to handle exceptions globally in Spring MVC?",
        "options": [
            "@ExceptionHandler",
            "@ResponseStatus",
            "@ControllerAdvice",
            "@RestController"
        ],
        "answer": "@ControllerAdvice"
    },
    {
        "id": "109",
        "question": "To take an input file or a payload and reliably, and systematically, decompose it into events that an ESB can work with:",
        "options": [
            "Splitter",
            "Spring Batch",
            "All of the mentioned",
            "None of the mentioned"
        ],
        "answer": "Spring Batch"
    },
    {
        "id": "110",
        "question": "Spring core framework provides first-class support for transactions.",
        "options": [
            "TransactionManager",
            "None of the mentioned",
            "Transaction",
            "All of the mentioned"
        ],
        "answer": "TransactionManager"
    }
]